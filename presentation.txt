
1. 팀 소개
2. 목차
    1. 왜 이 주제를 선정하였는가
    2. 무엇을 배우는가
    3. 어떻게 배우는가
3. 첫번째는 주제 선정입니다. inner circle에서 서브젝트를 통해 운영체제가 하는 일을 배울 수 있습니다. 예를들면 get_next_line은 file system, pipex/minitalk은 프로세스를 다루는 Inter process communication, philosopher에서는  프로세스 동기화와 관련된 mutex, semaphore, dead lock등을 배웁니다. 여기서 볼 수 있듯이 이 과제들에서는 명시적으로 메모리 관리만을 위한 주제는 없습니다.

1. 두번째는 무엇을 배우는가 입니다. 앞선 이유와 더불어 dash의 취지에 적합한 주제를 찾아 저희는 메모리 관리 중 page replacement algorithm을 다룰 것입니다. 
    1. 이 과제를 통해 먼저 메인 메모리에 페이징 개념이 적용되는 방법, 페이징, 페이지 교체 알고리즘이 필요한 경우와 종류에 대해 말씀드리겠습니다
2. 오른쪽 그림을 설명하겠습니다. 일단 사용자가 볼 수 있는 논리 메모리는 page 단위로, 실제 메인 메모리는 frame단위로 나뉩니다. 현재 프로세스가 논리 메모리에 저장되어있고 메인메모리에 올라올 때 프로세스의 페이지가 반드시 연속적으로 할당된다는 보장이 없습니다.
3. 이때 페이징이  페이지 테이블을 참조하여 논리 메모리의 주소를 메인 메모리의 주소로 변환하여 접근할 수 있도록 합니다.
4. 이런 방식을 사용하면 필요한 페이지만 메인메모리에 로드할 수 있습니다. 하지만 현재 기준으로 필요한 페이지만 올려놓으면 메인메모리에 적재되지 않은 페이지에 접근하는 일이 발생할 수 있고 이를 page fault라고 합니다.
5. page fault가 발생하면 새로운 페이지를 메모리에 올리기 위해 희생자 vicitim을  선택하는 페이지 교체 알고리즘이 동작합니다.

1. 페이지 교체 알고리즘에 대해 간략하게 설명하겠습니다.
2. 마지막으로 dash를 통해 어떻게 배우는가 입니다. 일단 서브젝트에 제공된 위키피디아 주소와 각자의 방식을 통해 페이지 교체 알고리즘 학습을 권유하고 최적의 알고리즘을 구현하도록 합니다.
3. 서브젝트에 명시한 사항대로 구현하고, corrector와 비교하여 자신이 구현한 알고리즘이 optimal algorithm이 맞는지 비교하도록 합니다. 서브젝트는 git repo에 올린 pdf를 참고해주세요
4. 공부를 하다보면 최적의 알고리즘은 미래의 프로세스 상태를 예측하므로 실제로는 구현이 매우 어렵다는 사실을 알게될 것입니다.  이 dash를 확장한다면 bonus로 실현 가능한 페이지 교체 알고리즘을 구현하도록 할 것입니다.

이상 저희 팀의 dash 발표를 마치겠습니다. 감사합니다

